Making ARM AUs from retro AU project: This workflow involves buying a bunch of things just to make the process bearable. The grep search is in BBEdit, you have to have an Apple Developer account for $99 a year even to be able to code sign things, and I'm using DropDMG for making signed DMGs.

Copy AU folder over to new location to be worked on

Edit the plugin.cpp file and change the entry point right up top by adding "AUDIO" and "AUBaseFactory, " 
   find \rCOMPONENT_ENTRY(
replace \rAUDIOCOMPONENT_ENTRY(AUBaseFactory, 

Edit the plugin.exp file and add a second entry to the _PluginEntry which is already there, so it's first _PluginEntry and then _PluginFactory on the next line. Make sure the name matches! To run on group of projects, use grep: (do not run twice on entire codebase!)
 	find ^[_](.*)Entry$
	replace &\r_\1Factory\r

find this in the info.plist file:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>

replace with:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AudioComponents</key>
		<array>
			<dict>
				<key>description</key>
				<string>${PRODUCT_NAME:identifier} AU</string>
				<key>factoryFunction</key>
				<string>${PRODUCT_NAME:identifier}Factory</string>
				<key>manufacturer</key>
				<string>Dthr</string>
				<key>name</key>
				<string>Airwindows: ${PRODUCT_NAME:identifier}</string>
				<key>subtype</key>
				<string>????</string>
				<key>type</key>
				<string>aufx</string>
				<key>version</key>
				<integer>65536</integer>
			</dict>
		</array>
	<key>CFBundleDevelopmentRegion</key>

Then open info.plist, and ???? becomes the ID that lives in PluginVersion.h

XCODE: Delete folders in red: PublicUtility, AUPublic
Drag in CA_SDK as present on the desktop. In choose options, don't copy items but Added folders: Create groups. This will cause the added folders to show up in yellow, and work properly.

SCHEME: Any Mac. Run section, Info: Build Configuration should be Release
PROJECT:
	Info: set MacOS Deployment Target to 11.1
	Build Settings (All)
		Architectures: Standard Architectures (Apple Silicon, Intel)
			Base SDK: macOS
			Build Active Architecture Only: Yes
		Search Paths, Always Search User Paths: No
			Header Search Paths: /Users/christopherjohnson/Desktop/CA_SDK/** 
TARGETS:
	Build Settings (All)
		Rez: Delete everything in Other Rez Flags, scroll up to top
		Deployment: Strip Style Debugging Symbols, continue scrolling up
		Architectures: Standard Architectures (Apple Silicon, Intel)
		Base SDK: macOS
	Build Phases: Delete Build Carbon Resources
	Signing & Capabilities: Automatically manage signing
		Team, Christopher Johnson
	General: set Deployment Target to 11.1
Clean Build Folder, then Build.
in Build Warnings, under Validate Project Settings: Update to recommended
Also walk through the localizations, letting XCode take care of those too

Product Menu: Archive
	Click 'Distribute Content'
	Export Built Products (return)
	to Distribute folder (return)

Once I've done this, I'll have a Distribute folder (on my desktop, which I selected) with HUGE stacks of folders inside it. Deep in subfolders is the signed .component files. What I'll do to get them out is use the Terminal and run DropDMG on the command line. It, too, is able to code sign stuff and I'll ask to do that using a Developer ID Application code signing thingy (it defaults to using this)

cd /Users/christopherjohnson/Desktop/Distribute 
find . -name "*.component" -exec dropdmg --config-name "airwindows" "{}" \;

I can also copy stuff into another folder to make a .dmg with all the contents in it, by dragging the resulting folder onto DropDMG:

find . -name "*.component" -exec cp -r "{}" /Users/christopherjohnson/Desktop/SignedAUs \;

But of course this is not enough, so we'll try to do yet another helper program to talk to Apple, this time using the resulting .dmg files we made. SD Notary from Late Night Software is what I'm going to try to use.

What we do there is, we run SD Notary with my Developer ID signing identity. AppleID is mine. I make an app-specific password for SD Notary, naming it 'Airwindows Plugins' and copying the actual password into my Keychain, which SD Notary is able to use. I also tell it 'when submitting, create and staple disk image'.

We submit one of the DMG files that DropDMG made (an individual plugin, as it's faster) and it dies:

         Date: 2021-04-19 00:01:51 +0000
          Hash: 8c68189fa9721280a2c4a7ac984cad383f92062a7877e2ee4f550f3757a5e695
    LogFileURL: https://osxapps-ssl.itunes.apple.com/itunes-assets/Enigma125/v4/00/7c/37/007c3728-8efe-252f-d930-94fd0368cb7b/developer_log.json?accessKey=1618984994_5749661836017605452_u8y5i5%2BzngYIF68Xe1lHq2RNmIhJkUPj3L3pj99%2BG2gUGDXwBHAtqJINKQ6V%2FIV%2BMj%2BFB5wqRgH3LAFV%2BVSXY0GNTs%2Bdk%2F16e088GJ1sACf1UtwyDpRcasEhCAXeJdedK3rhyyLNcPgctvFuNF9ezYhi%2BP0SXDrnhdxD1SQQhyo%3D
   RequestUUID: cc79057e-3b3e-4570-85a6-48e036786374
        Status: invalid
   Status Code: 2
Status Message: Package Invalid


{
  "logFormatVersion": 1,
  "jobId": "cc79057e-3b3e-4570-85a6-48e036786374",
  "status": "Invalid",
  "statusSummary": "Archive contains critical validation errors",
  "statusCode": 4000,
  "archiveFilename": "Aura.component.dmg",
  "uploadDate": "2021-04-19T00:01:51Z",
  "sha256": "8c68189fa9721280a2c4a7ac984cad383f92062a7877e2ee4f550f3757a5e695",
  "ticketContents": null,
  "issues": [
    {
      "severity": "error",
      "code": null,
      "path": "Aura.component.dmg/Aura.component/Contents/MacOS/Aura",
      "message": "The binary is not signed with a valid Developer ID certificate.",
      "docUrl": null,
      "architecture": "x86_64"
    },
    {
      "severity": "error",
      "code": null,
      "path": "Aura.component.dmg/Aura.component/Contents/MacOS/Aura",
      "message": "The signature does not include a secure timestamp.",
      "docUrl": null,
      "architecture": "x86_64"
    },
    {
      "severity": "error",
      "code": null,
      "path": "Aura.component.dmg/Aura.component/Contents/MacOS/Aura",
      "message": "The binary is not signed with a valid Developer ID certificate.",
      "docUrl": null,
      "architecture": "arm64"
    },
    {
      "severity": "error",
      "code": null,
      "path": "Aura.component.dmg/Aura.component/Contents/MacOS/Aura",
      "message": "The signature does not include a secure timestamp.",
      "docUrl": null,
      "architecture": "arm64"
    }
  ]
}


And that's where we're at, for now.